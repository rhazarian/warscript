import { TargetingType } from "../auxiliary/targeting-type"

import { LinkedSet } from "../../../utility/linked-set"

const orderTypeStringIdsByTargetingType: Record<TargetingType, string[]> = {
    [TargetingType.NONE]: [
        "innerfireoff",
        "innerfireon",
        "healoff",
        "healon",
        "frostarmoroff",
        "frostarmoron",
        "autodispeloff",
        "autodispelon",
        "bloodlustoff",
        "bloodluston",
        "webon",
        "weboff",
        "blackarrowoff",
        "blackarrowon",
        "carrionscarabs",
        "carrionscarabsinstant",
        "carrionscarabsoff",
        "carrionscarabson",
        "curseoff",
        "curseon",
        "faeriefireoff",
        "faeriefireon",
        "frenzy",
        "frenzyoff",
        "frenzyon",
        "incineratearrowoff",
        "incineratearrowon",
        "repairoff",
        "repairon",
        "renewoff",
        "renewon",
        "spellstealoff",
        "spellstealon",
        "slowoff",
        "slowon",
        "parasiteoff",
        "parasiteon",
        "raisedead",
        "raisedeadoff",
        "raisedeadon",
        "rechargeoff",
        "rechargeon",
        "replenishlifeoff",
        "replenishlifeon",
        "replenishmanaoff",
        "replenishmanaon",
        "replenishoff",
        "replenishon",
        "phaseshift",
        "phaseshiftinstant",
        "phaseshiftoff",
        "phaseshifton",
        "whirlwind",
        "animatedead",
        "wateryminion",
        "waterelemental",
        "avatar",
        "battleroar",
        "bearform",
        "berserk",
        "cannibalize",
        "burrow",
        "chemicalrage",
        "creepanimatedead",
        "creephealoff",
        "creephealon",
        "creepthunderclap",
        "windwalk",
        "defend",
        "fanofknives",
        "divineshield",
        "unsubmerge",
        "howlofterror",
        "militia",
        "militiaconvert",
        "militiaoff",
        "militiaunconvert",
        "metamorphosis",
        "mirrorimage",
        "resurrection",
        "submerge",
        "taunt",
        "coupletarget",
        "coupleinstant",
        "elementalfury",
        "ambush",
        "etherealform",
        "unetherealform",
        "undivineshield",
        "undefend",
        "unburrow",
        "tranquility",
        "unavatar",
        "thunderclap",
        "voodoo",
        "lavamonster",
        "locustswarm",
        "magicdefense",
        "magicundefense",
        "manaflareoff",
        "manaflareon",
        "manashieldoff",
        "manashieldon",
        "battlestations",
        "immolation",
        "loadarcher",
        "mounthippogryph",
        "coupletarget",
        "ensnareon",
        "ensnareoff",
        "vengeanceoff",
        "vengeanceon",
        "spiritofvengeance",
        "spiritwolf",
        "selfdestructoff",
        "selfdestructon",
        "stomp",
        "stoneform",
        "starfall",
        "townbelloff",
        "townbellon",
        "unimmolation",
        "unstoneform",
        "unwindwalk",
        "vengeance",
        "vengeanceinstant",
        "unrobogoblin",
        "robogoblin",
        "roar",
        "summongrizzly",
        "summonphoenix",
        "summonquillbeast",
        "summonwareagle",
        "unloadallcorpses",
        "unravenform",
        "ravenform",
        "poisonarrows",
        "unpoisonarrows",
        "unflamingarrows",
        "flamingarrows",
        "flamingattack",
        "unflamingattack",
        "coldarrows",
        "uncoldarrows",
        "unbearform",
        "returnresources",
        "loadcorpse",
        "loadcorpseinstant",
        "scout",
        "revive",
        "awaken",
        "ancestralspirit",
        "entangleinstant",
        "mechanicalcritter",
        "barkskinoff",
        "barkskinon",
        "unroot",
        "spirittroll",
        "standdown",
        "corporealform",
        "uncorporealform",
        "unloadallinstant",
        "autoentangleinstant",
        "undeadbuild",
        "orcbuild",
        "humanbuild",
        "nagabuild",
        "nightelfbuild",
        "restorationoff",
        "restorationon",
        "mount",
        "dismount",
        "phoenixmorph",
    ],
    [TargetingType.UNIT]: [
        "innerfire",
        "heal",
        "frostarmor",
        "autodispel",
        "bloodlust",
        "web",
        "blackarrow",
        "curse",
        "faeriefire",
        "incineratearrow",
        "repair",
        "renew",
        "spellsteal",
        "slow",
        "parasite",
        "recharge",
        "replenishmana",
        "replenish",
        "replenishlife",
        "absorb",
        "acidbomb",
        "acolyteharvest",
        "antimagicshell",
        "banish",
        "cripple",
        "cyclone",
        "darkritual",
        "charm",
        "chainlightning",
        "creepdevour",
        "creepheal",
        "creepthunderbolt",
        "darkconversion",
        "deathcoil",
        "deathpact",
        "devour",
        "doom",
        "sleep",
        "soulburn",
        "soulpreservation",
        "forkedlightning",
        "wispharvest",
        "eattree",
        "drunkenhaze",
        "grabtree",
        "hex",
        "healingwave",
        "polymorph",
        "harvest",
        "invisibility",
        "manaburn",
        "possession",
        "firebolt",
        "fingerofdeath",
        "frostnova",
        "shadowstrike",
        "unholyfrenzy",
        "rejuvination",
        "purge",
        "controlmagic",
        "transmute",
        "thunderbolt",
        "holybolt",
        "lightningshield",
        "magicleash",
        "mindrot",
        "entanglingroots",
        "ensnare",
        "spiritlink",
        "unstableconcoction",
        "poisonarrowstarg",
        "flamingarrowstarg",
        "flamingattacktarg",
        "coldarrowstarg",
        "load",
        "sacrifice",
        "sentinel",
        "ancestralspirittarget",
        "entangle",
        "drain",
        "shadowsight",
        "steal",
        "unsummon",
        "sanctuary",
        "preservation",
        "autoentangle",
    ],
    [TargetingType.POINT]: [
        "blink",
        "blizzard",
        "cloudoffog",
        "clusterrockets",
        "darkportal",
        "darksummoning",
        "deathanddecay",
        "detonate",
        "devourmagic",
        "dispel",
        "dreadlordinferno",
        "earthquake",
        "flare",
        "forceofnature",
        "healingspray",
        "healingward",
        "inferno",
        "monsoon",
        "flamestrike",
        "farsight",
        "evileye",
        "silence",
        "stasistrap",
        "volcano",
        "tornado",
        "rainofchaos",
        "rainoffire",
        "summonfactory",
        "unload",
        "disenchant",
        "root",
        "ward",
        "unloadall",
    ],
    [TargetingType.UNIT_OR_POINT]: [
        "breathoffire",
        "breathoffrost",
        "carrionswarm",
        "massteleport",
        "impale",
        "shockwave",
        "stampede",
        "selfdestruct",
        "setrally",
        "patrol",
        "dropitem",
    ],
    [TargetingType.PASSIVE]: [
        "attributemodskill",
        "auraunholy",
        "auravampiric",
        "corrosivebreath",
        "freezingbreath",
        "phoenixfire",
    ],
}

const targetingTypeByOrderTypeStringId: Record<string, TargetingType | undefined> = {}
for (const [targetingType, orderTypeStringIds] of pairs(orderTypeStringIdsByTargetingType)) {
    for (const orderTypeStringId of orderTypeStringIds) {
        targetingTypeByOrderTypeStringId[orderTypeStringId] = targetingType
    }
}

export class OrderTypeStringIdFactory {
    private positionByTargetingType = {} as Record<TargetingType, number | undefined>

    private recycleQueueByTargetingType = {} as Record<TargetingType, LinkedSet<string> | undefined>

    public next(targetingType: TargetingType): string {
        const recycleQueue = this.recycleQueueByTargetingType[targetingType]
        if (recycleQueue != undefined) {
            const orderString = recycleQueue.first()
            if (orderString != undefined) {
                recycleQueue.remove(orderString)
                return orderString
            }
        }

        const orderStrings = orderTypeStringIdsByTargetingType[targetingType]
        const position = this.positionByTargetingType[targetingType] ?? 0
        const orderString = orderStrings[position]
        this.positionByTargetingType[targetingType] = (position + 1) % orderStrings.length
        return orderString
    }

    public recycle(orderString: string): void {
        const targetingType = targetingTypeByOrderTypeStringId[orderString]
        if (targetingType != undefined) {
            let recycleQueue = this.recycleQueueByTargetingType[targetingType]
            if (recycleQueue == undefined) {
                recycleQueue = new LinkedSet()
                this.recycleQueueByTargetingType[targetingType] = recycleQueue
            }
            recycleQueue.add(orderString)
        }
    }
}

export const orderTypeStringIdFactory = new OrderTypeStringIdFactory()
