import { Unit } from "../unit"
import { INVULNERABLE_INTERNAL_ABILITY_TYPE_ID } from "../object-data/invulnerable"

const unitAddAbility = UnitAddAbility
const unitMakeAbilityPermanent = UnitMakeAbilityPermanent
const unitRemoveAbility = UnitRemoveAbility

const invulnerabilityCounterByUnit = setmetatable(new LuaMap<Unit, number>(), { __mode: "k" })

declare module "../unit" {
    interface Unit {
        incrementInvulnerabilityCounter(): void
    }
}
Unit.prototype.incrementInvulnerabilityCounter = function () {
    const invulnerabilityCounter = invulnerabilityCounterByUnit.get(this) ?? 0
    if (invulnerabilityCounter == 0) {
        const handle = this.handle
        unitAddAbility(handle, INVULNERABLE_INTERNAL_ABILITY_TYPE_ID)
        unitMakeAbilityPermanent(handle, true, INVULNERABLE_INTERNAL_ABILITY_TYPE_ID)
    }
    invulnerabilityCounterByUnit.set(this, invulnerabilityCounter + 1)
}

declare module "../unit" {
    interface Unit {
        decrementInvulnerabilityCounter(): void
    }
}
Unit.prototype.decrementInvulnerabilityCounter = function () {
    const invulnerabilityCounter = invulnerabilityCounterByUnit.get(this) ?? 0
    if (invulnerabilityCounter == 1) {
        unitRemoveAbility(this.handle, INVULNERABLE_INTERNAL_ABILITY_TYPE_ID)
    }
    invulnerabilityCounterByUnit.set(this, invulnerabilityCounter - 1)
}
